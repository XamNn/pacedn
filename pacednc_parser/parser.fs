// Implementation file for parser generated by fsyacc
module Pace.Compiler.Parsing.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "..\pacednc_parser\parser.fsy"



# 10 "..\pacednc_parser\parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | GLOBAL
  | MARKUP
  | ELEMENT
  | CLASS
  | STRUCT
  | RETURN
  | NULL
  | OBJECT
  | GET
  | SET
  | ALIAS
  | IF
  | WHEN
  | THEN
  | ELSE
  | BREAK
  | CONTINUE
  | IS
  | IMPORT
  | CONFIG
  | MAIN
  | FUNC
  | PUBLIC
  | PRIVATE
  | VISIBLE
  | THIS
  | INIT
  | FOR
  | YIELD
  | IMPLICIT
  | AUTOMATIC
  | OPERATOR
  | TRUE
  | FALSE
  | NOT
  | AND
  | OR
  | PERIOD
  | SEMICOLON
  | COMMA
  | EQUALS
  | LAMBDA
  | AT
  | QUESTION
  | PARENOPEN
  | PARENCLOSE
  | SQUAREOPEN
  | SQUARECLOSE
  | CURLYOPEN
  | CURLYCLOSE
  | ANGLEOPEN
  | ANGLECLOSE
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_GLOBAL
    | TOKEN_MARKUP
    | TOKEN_ELEMENT
    | TOKEN_CLASS
    | TOKEN_STRUCT
    | TOKEN_RETURN
    | TOKEN_NULL
    | TOKEN_OBJECT
    | TOKEN_GET
    | TOKEN_SET
    | TOKEN_ALIAS
    | TOKEN_IF
    | TOKEN_WHEN
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_BREAK
    | TOKEN_CONTINUE
    | TOKEN_IS
    | TOKEN_IMPORT
    | TOKEN_CONFIG
    | TOKEN_MAIN
    | TOKEN_FUNC
    | TOKEN_PUBLIC
    | TOKEN_PRIVATE
    | TOKEN_VISIBLE
    | TOKEN_THIS
    | TOKEN_INIT
    | TOKEN_FOR
    | TOKEN_YIELD
    | TOKEN_IMPLICIT
    | TOKEN_AUTOMATIC
    | TOKEN_OPERATOR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PERIOD
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_EQUALS
    | TOKEN_LAMBDA
    | TOKEN_AT
    | TOKEN_QUESTION
    | TOKEN_PARENOPEN
    | TOKEN_PARENCLOSE
    | TOKEN_SQUAREOPEN
    | TOKEN_SQUARECLOSE
    | TOKEN_CURLYOPEN
    | TOKEN_CURLYCLOSE
    | TOKEN_ANGLEOPEN
    | TOKEN_ANGLECLOSE
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | GLOBAL  -> 1 
  | MARKUP  -> 2 
  | ELEMENT  -> 3 
  | CLASS  -> 4 
  | STRUCT  -> 5 
  | RETURN  -> 6 
  | NULL  -> 7 
  | OBJECT  -> 8 
  | GET  -> 9 
  | SET  -> 10 
  | ALIAS  -> 11 
  | IF  -> 12 
  | WHEN  -> 13 
  | THEN  -> 14 
  | ELSE  -> 15 
  | BREAK  -> 16 
  | CONTINUE  -> 17 
  | IS  -> 18 
  | IMPORT  -> 19 
  | CONFIG  -> 20 
  | MAIN  -> 21 
  | FUNC  -> 22 
  | PUBLIC  -> 23 
  | PRIVATE  -> 24 
  | VISIBLE  -> 25 
  | THIS  -> 26 
  | INIT  -> 27 
  | FOR  -> 28 
  | YIELD  -> 29 
  | IMPLICIT  -> 30 
  | AUTOMATIC  -> 31 
  | OPERATOR  -> 32 
  | TRUE  -> 33 
  | FALSE  -> 34 
  | NOT  -> 35 
  | AND  -> 36 
  | OR  -> 37 
  | PERIOD  -> 38 
  | SEMICOLON  -> 39 
  | COMMA  -> 40 
  | EQUALS  -> 41 
  | LAMBDA  -> 42 
  | AT  -> 43 
  | QUESTION  -> 44 
  | PARENOPEN  -> 45 
  | PARENCLOSE  -> 46 
  | SQUAREOPEN  -> 47 
  | SQUARECLOSE  -> 48 
  | CURLYOPEN  -> 49 
  | CURLYCLOSE  -> 50 
  | ANGLEOPEN  -> 51 
  | ANGLECLOSE  -> 52 
  | ID _ -> 53 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_GLOBAL 
  | 2 -> TOKEN_MARKUP 
  | 3 -> TOKEN_ELEMENT 
  | 4 -> TOKEN_CLASS 
  | 5 -> TOKEN_STRUCT 
  | 6 -> TOKEN_RETURN 
  | 7 -> TOKEN_NULL 
  | 8 -> TOKEN_OBJECT 
  | 9 -> TOKEN_GET 
  | 10 -> TOKEN_SET 
  | 11 -> TOKEN_ALIAS 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_WHEN 
  | 14 -> TOKEN_THEN 
  | 15 -> TOKEN_ELSE 
  | 16 -> TOKEN_BREAK 
  | 17 -> TOKEN_CONTINUE 
  | 18 -> TOKEN_IS 
  | 19 -> TOKEN_IMPORT 
  | 20 -> TOKEN_CONFIG 
  | 21 -> TOKEN_MAIN 
  | 22 -> TOKEN_FUNC 
  | 23 -> TOKEN_PUBLIC 
  | 24 -> TOKEN_PRIVATE 
  | 25 -> TOKEN_VISIBLE 
  | 26 -> TOKEN_THIS 
  | 27 -> TOKEN_INIT 
  | 28 -> TOKEN_FOR 
  | 29 -> TOKEN_YIELD 
  | 30 -> TOKEN_IMPLICIT 
  | 31 -> TOKEN_AUTOMATIC 
  | 32 -> TOKEN_OPERATOR 
  | 33 -> TOKEN_TRUE 
  | 34 -> TOKEN_FALSE 
  | 35 -> TOKEN_NOT 
  | 36 -> TOKEN_AND 
  | 37 -> TOKEN_OR 
  | 38 -> TOKEN_PERIOD 
  | 39 -> TOKEN_SEMICOLON 
  | 40 -> TOKEN_COMMA 
  | 41 -> TOKEN_EQUALS 
  | 42 -> TOKEN_LAMBDA 
  | 43 -> TOKEN_AT 
  | 44 -> TOKEN_QUESTION 
  | 45 -> TOKEN_PARENOPEN 
  | 46 -> TOKEN_PARENCLOSE 
  | 47 -> TOKEN_SQUAREOPEN 
  | 48 -> TOKEN_SQUARECLOSE 
  | 49 -> TOKEN_CURLYOPEN 
  | 50 -> TOKEN_CURLYCLOSE 
  | 51 -> TOKEN_ANGLEOPEN 
  | 52 -> TOKEN_ANGLECLOSE 
  | 53 -> TOKEN_ID 
  | 56 -> TOKEN_end_of_input
  | 54 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 56 
let _fsyacc_tagOfErrorTerminal = 54

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | GLOBAL  -> "GLOBAL" 
  | MARKUP  -> "MARKUP" 
  | ELEMENT  -> "ELEMENT" 
  | CLASS  -> "CLASS" 
  | STRUCT  -> "STRUCT" 
  | RETURN  -> "RETURN" 
  | NULL  -> "NULL" 
  | OBJECT  -> "OBJECT" 
  | GET  -> "GET" 
  | SET  -> "SET" 
  | ALIAS  -> "ALIAS" 
  | IF  -> "IF" 
  | WHEN  -> "WHEN" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | BREAK  -> "BREAK" 
  | CONTINUE  -> "CONTINUE" 
  | IS  -> "IS" 
  | IMPORT  -> "IMPORT" 
  | CONFIG  -> "CONFIG" 
  | MAIN  -> "MAIN" 
  | FUNC  -> "FUNC" 
  | PUBLIC  -> "PUBLIC" 
  | PRIVATE  -> "PRIVATE" 
  | VISIBLE  -> "VISIBLE" 
  | THIS  -> "THIS" 
  | INIT  -> "INIT" 
  | FOR  -> "FOR" 
  | YIELD  -> "YIELD" 
  | IMPLICIT  -> "IMPLICIT" 
  | AUTOMATIC  -> "AUTOMATIC" 
  | OPERATOR  -> "OPERATOR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | PERIOD  -> "PERIOD" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | EQUALS  -> "EQUALS" 
  | LAMBDA  -> "LAMBDA" 
  | AT  -> "AT" 
  | QUESTION  -> "QUESTION" 
  | PARENOPEN  -> "PARENOPEN" 
  | PARENCLOSE  -> "PARENCLOSE" 
  | SQUAREOPEN  -> "SQUAREOPEN" 
  | SQUARECLOSE  -> "SQUARECLOSE" 
  | CURLYOPEN  -> "CURLYOPEN" 
  | CURLYCLOSE  -> "CURLYCLOSE" 
  | ANGLEOPEN  -> "ANGLEOPEN" 
  | ANGLECLOSE  -> "ANGLECLOSE" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | GLOBAL  -> (null : System.Object) 
  | MARKUP  -> (null : System.Object) 
  | ELEMENT  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | OBJECT  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | ALIAS  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | CONFIG  -> (null : System.Object) 
  | MAIN  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | PUBLIC  -> (null : System.Object) 
  | PRIVATE  -> (null : System.Object) 
  | VISIBLE  -> (null : System.Object) 
  | THIS  -> (null : System.Object) 
  | INIT  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | YIELD  -> (null : System.Object) 
  | IMPLICIT  -> (null : System.Object) 
  | AUTOMATIC  -> (null : System.Object) 
  | OPERATOR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | PERIOD  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | PARENOPEN  -> (null : System.Object) 
  | PARENCLOSE  -> (null : System.Object) 
  | SQUAREOPEN  -> (null : System.Object) 
  | SQUARECLOSE  -> (null : System.Object) 
  | CURLYOPEN  -> (null : System.Object) 
  | CURLYCLOSE  -> (null : System.Object) 
  | ANGLEOPEN  -> (null : System.Object) 
  | ANGLECLOSE  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; |]
let _fsyacc_action_rows = 2
let _fsyacc_actionTableElements = [|0us; 16385us; 0us; 49152us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; |]
let _fsyacc_reductions ()  =    [| 
# 385 "..\pacednc_parser\parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 394 "..\pacednc_parser\parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "..\pacednc_parser\parser.fsy"
                         "hello"
                   )
# 20 "..\pacednc_parser\parser.fsy"
                 :  string ));
|]
# 405 "..\pacednc_parser\parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 57;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  string  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
